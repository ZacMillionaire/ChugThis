@using Nulah.ChugThis.Models
@{
    PublicUser User = (PublicUser)ViewData["User"];
    Provider LoginProvider = (Provider)ViewData["LoginProvider"];
}
<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.41.0/mapbox-gl.js'></script>
<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.41.0/mapbox-gl.css' rel='stylesheet' />
<link href="~/css/site/mapbox.css" rel="stylesheet" />
<div id="mapbox-container">
</div>
<div class="is-small-screen-container is-hidden" id="add-new-marker-form">
    @if(!User.isLoggedIn) {
        <div class="message is-warning">
            <div class="message-header">
                <p><i class="fa fa-warning"></i> Not Logged In</p>

            </div>
            <div class="message-body">
                <div class="container is-fluid">You'll need to be logged in before you'll be able to add a new location.</div>
                <div class="container has-text-centered">
                    <a id="new-marker-login" class="button" href="~/Login/@(LoginProvider.AuthenticationScheme)" style="color: #fff !important; background-color:#3b5998; border-color:#496bb2">
                        <span class="icon"><i class="fa fa-facebook"></i></span>
                        <span class="has-text-weight-bold">
                            @(LoginProvider.AuthenticationScheme)
                        </span>
                    </a>
                    <span></span>
                    <div class="container is-fluid has-text-centered">(You'll be redirected back to the marker you just placed after logging in)</div>
                </div>
            </div>
        </div>
    } else {
        <div class="container">
            <form action="~/Add/NewMarker" method="post" asp-antiforgery="true" enctype="application/x-www-form-urlencoded">
                <div class="field is-horizontal">
                    <div class="field-label is-normal">
                        <label class="label">Location</label>
                    </div>
                    <div class="field-body">
                        <div class="field has-addons">
                            <div class="control">
                                <span class="button is-static">
                                    <span>Pre-filled</span>
                                </span>
                            </div>
                            <div class="control is-expanded has-icons-left">
                                <span class="icon is-normal">
                                    <i class="fa fa-location-arrow"></i>
                                </span>
                                <input class="input is-static" type="text" placeholder="Charity Location" id="Location-Display" disabled />
                                <input type="hidden" name="Location" id="Charity-Location" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="field is-horizontal">
                    <div class="field-label is-normal">
                        <label class="label" for="Charity-Name">Charity</label>
                    </div>
                    <div class="field-body">
                        <div class="field">
                            <div class="control is-expanded">
                                <input class="input" type="text" name="Name" placeholder="Charity Name" id="Charity-Name" />
                            </div>
                            <div class="control">
                                <ul>
                                    <li>
                                        Auto complete list <em>when</em>.
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="field is-horizontal">
                    <div class="field-label">
                        <span class="label">How are they?</span>
                    </div>
                    <div class="field-body">
                        <div class="field">
                            <div class="control">
                                <div class="columns">
                                    <div class="column">
                                        <label class="checkbox button is-fullwidth" style="justify-content: flex-start;">
                                            <span>
                                                <span>
                                                    <input type="checkbox" name="Doing" value="obnoxious" />
                                                </span>
                                                <span>
                                                    Obnoxious
                                                </span>
                                            </span>
                                        </label>
                                    </div>
                                    <div class="column">
                                        <label class="checkbox button is-fullwidth" style="justify-content: flex-start;">
                                            <span>
                                                <span>
                                                    <input type="checkbox" name="Doing" value="blocking-path" />
                                                </span>
                                                <span>
                                                    Blocking the Path
                                                </span>
                                            </span>
                                        </label>
                                    </div>
                                    <div class="column">
                                        <label class="checkbox button is-fullwidth" style="justify-content: flex-start;">
                                            <span>
                                                <span>
                                                    <input type="checkbox" name="Doing" value="pushy" />
                                                </span>
                                                <span>
                                                    Pushy
                                                </span>
                                            </span>
                                        </label>
                                    </div>
                                    <div class="column">
                                        <label class="checkbox button is-fullwidth" style="justify-content: flex-start;">
                                            <span>
                                                <span>
                                                    <input type="checkbox" name="Doing" value="self-righteous" />
                                                </span>
                                                <span>
                                                    Self Righteous
                                                </span>
                                            </span>
                                        </label>
                                    </div>
                                    <div class="column">
                                        <label class="checkbox button is-fullwidth" style="justify-content: flex-start;">
                                            <span>
                                                <span>
                                                    <input type="checkbox" name="Doing" value="very-annoying" />
                                                </span>
                                                <span>
                                                    Being really annoying
                                                </span>
                                            </span>
                                        </label>
                                    </div>
                                    <div class="column">
                                        <label class="checkbox button is-fullwidth" style="justify-content: flex-start;">
                                            <span>
                                                <span>
                                                    <input type="checkbox" name="Doing" value="undercover" />
                                                </span>
                                                <span>
                                                    Plain clothes
                                                </span>
                                            </span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <span class="help">Leave these unchecked if they were <strong><em>not</em></strong> annoying</span>
                        </div>
                    </div>
                </div>
                <div class="field has-addons has-addons-right">
                    <div class="control">
                        <button class="button is-link is-medium">Submit</button>
                    </div>
                </div>
            </form>
        </div>
    }
</div>
<div id="info"></div>

@section Scripts {
    <script type="text/javascript" src="~/js/Maps/map.js" asp-append-version="true"></script>
    <script type="text/javascript">
        /*
        // iOS console logging, because I don't own a Mac to see console log
        // Why the fuck is that the only way to actually get console.log?
        (function () {
            var docLog = document.querySelector("#info");
            if (window.console && console.log) {
                var ol = console.log;
                var oe = console.error;
                var ow = console.warn;
                console.log = function () {
                    var logDiv = document.createElement("div");
                    logDiv.innerText = arguments[0];
                    docLog.appendChild(logDiv);

                    Array.prototype.unshift.call(arguments);
                    ol.apply(this, arguments)
                }
                console.error = function () {
                    var logDiv = document.createElement("div");
                    logDiv.innerText = arguments[0];
                    docLog.appendChild(logDiv);

                    Array.prototype.unshift.call(arguments);
                    oe.apply(this, arguments)
                }

                console.warn = function () {
                    var logDiv = document.createElement("div");
                    logDiv.innerText = arguments[0];
                    docLog.appendChild(logDiv);

                    Array.prototype.unshift.call(arguments);
                    ow.apply(this, arguments)
                }
            }
        })();
        */
        if ("geolocation" in navigator) {
            PageBusyOverlay.Show("Waiting on MapBox...");
                navigator.geolocation.getCurrentPosition(function (position) {
                    var cm = new ChugMap("@ViewData["MapBoxKey"]",
                        {
                            Container: 'mapbox-container',
                            Zoom: {
                                StartZoom: @User.Zoom.Starting,
                                Desktop: @User.Zoom.Desktop,
                                Mobile: @User.Zoom.Mobile
                            },
                            MarkerSize: {
                                Add: @User.Marker.AddMarkerSize,
                                CharityBase: @User.Marker.FeatureMarkerBaseSize
                            },
                            UserPreferences: {
                                AutoLocate : @(User.Preferences.AutoLocate.ToString().ToLower())
                            },
                            FormTarget: "#add-new-marker-form"
                        }
                    );
                    cm.RenderMap(position);
                }, function (err) {
                    console.log(err); // I'd love to shove this into an XHR call to log the error later for mobile stuff.
                    // probably have it trigger a modal to let the user know as well.
                });
            } else {
                alert("can't locate");
                // geolocation IS NOT available
            }
    </script>
}
